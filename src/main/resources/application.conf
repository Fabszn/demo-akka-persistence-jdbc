# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {
  stdout-loglevel = debug // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = info
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  actor {
    serialize-messages = on // verify that messages are serializable

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    serializers {
      createPerson = "com.github.dnvriend.serializer.CreatePersonSerializer"
      changeFirstName = "com.github.dnvriend.serializer.ChangeFirstNameSerializer"
      changeLastName = "com.github.dnvriend.serializer.ChangeLastNameSerializer"

      personCreated = "com.github.dnvriend.serializer.PersonCreatedSerializer"
      firstNameChanged = "com.github.dnvriend.serializer.FirstNameChangedSerializer"
      lastNameChanged = "com.github.dnvriend.serializer.LastNameChangedSerializer"
    }

    serialization-bindings {
      "com.github.dnvriend.domain.CreatePerson" = createPerson
      "com.github.dnvriend.data.Command.PBCreatePerson" = createPerson
      "com.github.dnvriend.domain.ChangeFirstName" = changeFirstName
      "com.github.dnvriend.domain.ChangeLastName" = changeLastName

      "com.github.dnvriend.data.Event.PBPersonCreated" = personCreated
      "com.github.dnvriend.data.Event.PBFirstNameChanged" = firstNameChanged
      "com.github.dnvriend.data.Event.PBLastNameChanged" = lastNameChanged
    }
  }

  persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }
}

jdbc-journal {

  // akka persistence can convert domain messages to messages specific for
  // the plugin, like eg. tagging an event
  event-adapters {
    tagging = "com.github.dnvriend.adapter.TaggingEventAdapter"
  }

  event-adapter-bindings {
    "com.github.dnvriend.data.Event.PBPersonCreated" = tagging
    "com.github.dnvriend.data.Event.PBFirstNameChanged" = tagging
    "com.github.dnvriend.data.Event.PBLastNameChanged" = tagging
    "com.github.dnvriend.domain.PersonCreated" = tagging
    "com.github.dnvriend.domain.FirstNameChanged" = tagging
    "com.github.dnvriend.domain.LastNameChanged" = tagging
  }
}


akka-persistence-jdbc {
  slick {
    driver = "slick.driver.PostgresDriver"
    db {
      host = "boot2docker"
      host = ${?POSTGRES_HOST}
      port = "5432"
      port = ${?POSTGRES_PORT}
      name = "docker"

      url = "jdbc:postgresql://"${akka-persistence-jdbc.slick.db.host}":"${akka-persistence-jdbc.slick.db.port}"/"${akka-persistence-jdbc.slick.db.name}
      user = "docker"
      password = "docker"
      driver = "org.postgresql.Driver"
      keepAliveConnection = on
      numThreads = 2
      queueSize = 100
    }
  }
}