# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {
  stdout-loglevel = debug // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = info
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  actor {
    serialize-messages = on

    debug {
      receive = off // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }

  serializers {
    personCreated = "com.github.dnvriend.serializer.NameRegisteredSerializer"
    nameChanged = "com.github.dnvriend.serializer.NameChangedSerializer"
    surnameChanged = "com.github.dnvriend.serializer.SurnameChangedSerializer"
  }

  serialization-bindings {
    "com.github.dnvriend.data.Person$NameRegistered" = personCreated
    "com.github.dnvriend.data.Person$NameChanged" = nameChanged
    "com.github.dnvriend.data.Person$SurnameChanged" = surnameChanged
  }
}

jdbc-journal {
  event-adapters {
    tagging = "com.github.dnvriend.adapter.TaggingEventAdapter"
  }
  event-adapter-bindings {
    "com.github.dnvriend.Person$PersonCreated" = tagging
    "com.github.dnvriend.Person$FirstNameChanged" = tagging
    "com.github.dnvriend.Person$LastNameChanged" = tagging
  }
}

slick {
# Use ANSI color sequences in tree dumps
ansiDump = false

# Use Unicode box characters in tree and table dumps
unicodeDump = true

# Dump individual Select and Ref nodes instead of a single Path
dumpPaths = false

# Use multi-line, indented formatting for SQL statements
sqlIndent = true

# Verify types after each query compiler phase
verifyTypes = false

# Detect unnecessary rebuilding of the AST after every query compiler phase
detectRebuild = false
}

akka-persistence-jdbc {
slick {
driver = "slick.driver.PostgresDriver"
db {
  host = "boot2docker"
  host = ${?POSTGRES_HOST}
  port = "5432"
  port = ${?POSTGRES_PORT}
  name = "docker"

  url = "jdbc:postgresql://"${akka-persistence-jdbc.slick.db.host}":"${akka-persistence-jdbc.slick.db.port}"/"${akka-persistence-jdbc.slick.db.name}
  user = "docker"
  password = "docker"
  driver = "org.postgresql.Driver"
  keepAliveConnection = on
  numThreads = 2
  queueSize = 100
}
}

tables {
journal {
  tableName = "journal"
  schemaName = ""
  columnNames {
    persistenceId = "persistence_id"
    sequenceNumber = "sequence_number"
    created = "created"
    tags = "tags"
    message = "message"
  }
}

deletedTo {
  tableName = "deleted_to"
  schemaName = ""
  columnNames = {
    persistenceId = "persistence_id"
    deletedTo = "deleted_to"
  }
}

snapshot {
  tableName = "snapshot"
  schemaName = ""
  columnNames {
    persistenceId = "persistence_id"
    sequenceNumber = "sequence_number"
    created = "created"
    snapshot = "snapshot"
  }
}
}

query {
separator = ","
}
}